☸ Kubernetes troubleshooting Commands:-

1. kubectl get pods - This command will show the status of all pods in the current namespace.

2. kubectl describe pod <pod-name> - This command will give detailed information about the specified pod, including its current status, events, and container statuses.

3. kubectl logs <pod-name> <container-name> - This command will print the logs of the specified container within the specified pod.

4. kubectl exec -it <pod-name> <container-name> /bin/bash - This command will open a shell inside the specified container within the specified pod, which can be useful for debugging.

5. kubectl get events - This command will show the recent events that have occurred in the cluster, which can help identify any issues.

6. kubectl describe node <node-name> - This command will provide detailed information about the specified node, including its status and any issues that might be affecting it.

7. kubectl get services - This command will show the status of all services in the current namespace.

8. kubectl describe service <service-name> - This command will provide detailed information about the specified service, including its current status and any issues that might be affecting it.

9. kubectl get deployments - This command will show the status of all deployments in the current namespace.

10. kubectl describe deployment <deployment-name> - This command will provide detailed information about the specified deployment, including its current status and any issues that might be affecting it.

☸ kubectl Commands:-

1. kubectl version - This command displays the version of both the Kubectl client and the Kubernetes cluster it is connected to.

2. kubectl cluster-info - This command displays information about the Kubernetes cluster, including the cluster API endpoint.

3. kubectl get - This command retrieves resources such as pods, services, deployments, and nodes.

4. kubectl create - This command creates resources such as pods, services, deployments, and namespaces.

5. kubectl apply - This command applies changes to existing resources or creates new ones based on a YAML or JSON file.

6. kubectl delete - This command deletes resources such as pods, services, deployments, and namespaces.

7. kubectl logs - This command retrieves logs from a container running inside a pod.

8. kubectl exec - This command allows you to execute a command inside a container running inside a pod.

9. kubectl port-forward - This command creates a tunnel between a local machine and a pod in order to access a service running inside the pod.

10. kubectl describe - This command provides detailed information about a Kubernetes resource, such as a pod, service, or deployment.

11. kubectl edit - This command allows you to edit the configuration of a Kubernetes resource.

12. kubectl rollout - This command allows you to manage rolling updates for deployments.




kubernetes logs:-

1.kubectl logs <pod-name> - This command retrieves the logs of a specific pod.

2. kubectl logs -f <pod-name> - This command streams the logs of a specific pod in real-time, useful for monitoring logs as they occur.

3. kubectl logs <pod-name> <container-name> - This command retrieves the logs of a specific container running in a pod with multiple containers.

4. kubectl logs -f <pod-name> <container-name> - This command streams the logs of a specific container running in a pod with multiple containers in real-time.

5. kubectl logs --tail=<number-of-lines> <pod-name> - This command retrieves the specified number of lines from the end of the logs of a specific pod.

6. kubectl logs --since=<time> <pod-name> - This command retrieves the logs of a specific pod since a specified time. The time parameter can be specified in the format of 10s for 10 seconds, 1m for 1 minute, 1h for 1 hour, or 1d for 1 day.

7. kubectl logs --timestamps <pod-name> - This command adds timestamps to the logs of a specific pod.

8. kubectl logs --previous <pod-name> - This command retrieves the logs of the previous container instance of a specific pod. This is useful for debugging issues after a pod has been restarted.

9. kubectl logs <pod-name> -c <container-name> - This command retrieves the logs of a specific container in a specific pod.

10. kubectl logs <pod-name> -n <namespace-name> - This command retrieves the logs of a specific pod in a specific namespace.

11. kubectl logs <pod-name> --all-containers - This command retrieves the logs of all containers running in a specific pod.

☸ Debugging Container Image

1. kubectl run -i --tty --image=<image-name> -- sh - This command starts a new pod using the specified container image, and opens an interactive shell session inside the pod. You can use this shell session to investigate issues with the container image.

2. kubectl exec -it <pod-name> -- sh - This command opens an interactive shell session inside an existing pod. You can use this shell session to investigate issues with the container image running inside the pod.

3. kubectl describe pod <pod-name> - This command displays detailed information about a specific pod, including the image name and version. You can use this command to verify that the correct container image is being used.

4. kubectl logs <pod-name> - This command displays the logs of a specific pod. You can use this command to investigate any error messages or warnings that might be related to the container image.

5. kubectl port-forward <pod-name> <local-port>:<remote-port> - This command forwards a local port to a port on the container running inside a specific pod. 

6. kubectl exec -it <pod-name> -- <command> - This command allows you to execute a specific command inside a container running inside a pod.